openapi: 3.0.0
info:
  title: KidKarden API
  version: 1.0.0
  description: API for KidKarden Management System 
servers:
  - url: http://localhost:5000/api
    description: Development server

paths:
  /admin/signup:
    post:
      tags: [Authentication]
      summary: Register a new admin user
      description: Creates a new admin user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
                age:
                  type: integer
                  example: 30
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User signed up successfully"
        '400':
          description: Missing required fields
        '500':
          description: Internal server error

  /admin/signin:
    post:
      tags: [Authentication]
      summary: Authenticate admin user
      description: Logs in an admin user and returns JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "admin@example.com"
                password:
                  type: string
                  format: password
                  example: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; Max-Age=7200; SameSite=Strict"
        '400':
          description: Missing credentials
        '401':
          description: Invalid credentials
        '500':
          description: Internal server error

  # Applications Endpoints
  /application:
    post:
      tags: [Applications]
      summary: Create new application
      description: Creates application with image upload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, email, phone, image]
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                phone:
                  type: string
                  example: "+1234567890"
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Application created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application created successfully"
                  data:
                    $ref: '#/components/schemas/Application'
        '400':
          description: Missing required fields
        '500':
          description: Image upload failed

    get:
      tags: [Applications]
      summary: Get paginated applications
      parameters:
        - in: query
          name: page
          schema: {type: integer, default: 1, minimum: 1}
        - in: query
          name: limit
          schema: {type: integer, default: 10, minimum: 1, maximum: 100}
      responses:
        '200':
          description: Applications retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedApplications'
        '500':
          description: Internal server error

    delete:
      tags: [Applications]
      summary: Delete application by ID
      parameters:
        - in: query
          name: id
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Application deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Application deleted successfully"
                  data:
                    $ref: '#/components/schemas/Application'
        '400':
          description: ID required
        '404':
          description: Application not found
        '500':
          description: Internal server error

  /application/search:
    get:
      tags: [Applications]
      summary: Search applications by name
      parameters:
        - in: query
          name: name
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Applications found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {$ref: '#/components/schemas/Application'}
                  message:
                    type: string
                    example: "Applications found"
        '400':
          description: Name parameter required
        '404':
          description: No applications found
        '500':
          description: Internal server error

  # Attendance Endpoints
  /attendance/mark:
    post:
      tags: [Attendance]
      summary: Mark student attendance
      parameters:
        - in: query
          name: id
          required: true
          schema: {type: string}
      responses:
        '201':
          description: Attendance marked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User attended successfully"
                  data:
                    $ref: '#/components/schemas/Attendance'
        '400':
          description: ID required or already marked
        '500':
          description: Internal server error

  /attendance/display:
    get:
      tags: [Attendance]
      summary: Get student attendance records
      parameters:
        - in: query
          name: id
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Attendance records retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {$ref: '#/components/schemas/Attendance'}
                  message:
                    type: string
                    example: "Attendance found"
        '400':
          description: ID required
        '500':
          description: Internal server error

  /attendance/graph:
    get:
      tags: [Attendance]
      summary: Get monthly attendance data for graph
      responses:
        '200':
          description: Graph data retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {$ref: '#/components/schemas/AttendanceGraphData'}
                  message:
                    type: string
                    example: "Attendance found"
        '500':
          description: Internal server error

  /attendance/today:
    get:
      tags: [Attendance]
      summary: Get today's attendance count
      responses:
        '200':
          description: Today's count retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: integer
                    example: 15
                  message:
                    type: string
                    example: "Attendance found"
        '500':
          description: Internal server error

  # Students Endpoints
  /student/count_graph:
    get:
      tags: [Students]
      summary: Get student registration count per year
      description: Retrieves analytics data showing student registration counts grouped by year for graphical representation
      responses:
        '200':
          description: Registration count data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RegistrationCountData'
                    description: Array of yearly registration counts
        '500':
          description: Internal server error


  /student:
    get:
      tags: [Students]
      summary: Get paginated students
      parameters:
        - in: query
          name: page
          schema: {type: integer, default: 1, minimum: 1}
        - in: query
          name: limit
          schema: {type: integer, default: 10, minimum: 1, maximum: 100}
      responses:
        '200':
          description: Students retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStudents'
        '500':
          description: Internal server error

    post:
      tags: [Students]
      summary: Create new student
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [name, email, phone, image]
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                phone:
                  type: string
                  example: "+1234567890"
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Student created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student created successfully"
                  data:
                    $ref: '#/components/schemas/Student'
        '400':
          description: Missing required fields
        '500':
          description: Image upload failed

  /student/search:
    get:
      tags: [Students]
      summary: Search students by name
      parameters:
        - in: query
          name: name
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Students found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {$ref: '#/components/schemas/Student'}
                  message:
                    type: string
                    example: "Students found"
        '400':
          description: Name parameter required
        '404':
          description: No students found
        '500':
          description: Internal server error

  /student/export/csv:
    get:
      tags: [Students]
      summary: Export all students as CSV
      responses:
        '200':
          description: CSV file generated
          content:
            text/csv:
              schema: {type: string, format: binary}
          headers:
            Content-Disposition:
              schema: {type: string, example: "attachment; filename=students.csv"}
        '500':
          description: Internal server error

  /student/{id}:
    put:
      tags: [Students]
      summary: Update student by ID
      description: Update student information including optional image upload
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: string}
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name: {type: string, example: "John Doe Updated"}
                email: {type: string, format: email, example: "john.updated@example.com"}
                phone: {type: string, example: "+0987654321"}
                image: {type: string, format: binary, description: "New profile image (optional)"}
      responses:
        '200':
          description: Student updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student updated successfully"
                  data:
                    $ref: '#/components/schemas/Student'
        '400':
          description: ID is required
        '404':
          description: Student not found
        '500':
          description: Internal server error

    delete:
      tags: [Students]
      summary: Delete student by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Student deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Student deleted successfully"
                  data:
                    $ref: '#/components/schemas/Student'
        '400':
          description: ID is required
        '404':
          description: Student not found
        '500':
          description: Internal server error

  # Subscriptions Endpoints
  /subscription/pay:
    post:
      tags: [Subscriptions]
      summary: Pay student subscription
      parameters:
        - in: query
          name: id
          required: true
          schema: {type: string}
      responses:
        '201':
          description: Subscription paid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User subscribed successfully"
                  data:
                    $ref: '#/components/schemas/Subscription'
        '400':
          description: ID required
        '500':
          description: Internal server error

  /subscription/display:
    get:
      tags: [Subscriptions]
      summary: Get student subscription records
      parameters:
        - in: query
          name: id
          required: true
          schema: {type: string}
      responses:
        '200':
          description: Subscriptions retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: {$ref: '#/components/schemas/Subscription'}
                  message:
                    type: string
                    example: "Subscriptions found"
        '400':
          description: ID required
        '500':
          description: Internal server error

  /subscription/this-month:
    get:
      tags: [Subscriptions]
      summary: Get this month's subscription count
      responses:
        '200':
          description: Monthly count retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  number:
                    type: integer
                    example: 15
                  message:
                    type: string
                    example: "Subscriptions this month"
        '500':
          description: Internal server error

  /subscription/download-all:
    get:
      tags: [Subscriptions]
      summary: Download all subscriptions as CSV
      responses:
        '200':
          description: CSV file generated
          content:
            text/csv:
              schema: {type: string, format: binary}
          headers:
            Content-Disposition:
              schema: {type: string, example: "attachment; filename=subscriptions.csv"}
        '404':
          description: No subscriptions found
        '500':
          description: Internal server error

components:
  schemas:
    Admin:
      type: object
      properties:
        _id: {type: string, example: "507f1f77bcf86cd799439011"}
        name: {type: string, example: "John Doe"}
        email: {type: string, format: email, example: "admin@example.com"}
        createdAt: {type: string, format: date-time, example: "2023-01-01T00:00:00.000Z"}

    Application:
      type: object
      properties:
        _id: {type: string, example: "507f1f77bcf86cd799439011"}
        name: {type: string, example: "John Doe"}
        email: {type: string, format: email, example: "john@example.com"}
        phone: {type: string, example: "+1234567890"}
        image: {type: string, format: uri, example: "https://res.cloudinary.com/example/image/upload/v1234567890/profile.jpg"}
        createdAt: {type: string, format: date-time, example: "2023-01-01T00:00:00.000Z"}

    PaginatedApplication:
      type: object
      properties:
        applications:
          type: array
          items: {$ref: '#/components/schemas/Application'}
        totalPages: {type: integer, example: 5}
        currentPage: {type: integer, example: 1}
        totalApplications: {type: integer, example: 42}

    Student:
      type: object
      properties:
        _id: {type: string, example: "507f1f77bcf86cd799439011"}
        name: {type: string, example: "John Doe"}
        email: {type: string, format: email, example: "john@example.com"}
        phone: {type: string, example: "+1234567890"}
        image: {type: string, format: uri, example: "https://res.cloudinary.com/example/image/upload/v1234567890/profile.jpg"}
        createdAt: {type: string, format: date-time, example: "2023-01-01T00:00:00.000Z"}

    PaginatedStudents:
      type: object
      properties:
        students:
          type: array
          items: {$ref: '#/components/schemas/Student'}
        totalPages: {type: integer, example: 5}
        currentPage: {type: integer, example: 1}
        totalStudents: {type: integer, example: 42}

    Attendance:
      type: object
      properties:
        _id: {type: string, example: "507f1f77bcf86cd799439011"}
        studentId: {type: string, example: "608f1f77bcf86cd799439012"}
        status: {type: string, enum: [present, absent], example: "present"}
        createdAt: {type: string, format: date-time, example: "2023-12-15T09:30:00.000Z"}

    AttendanceGraphData:
      type: object
      properties:
        date: {type: string, format: date, example: "2023-12-15"}
        presentCount: {type: integer, example: 25}
        absentCount: {type: integer, example: 5}

    Subscription:
      type: object
      properties:
        _id: {type: string, example: "507f1f77bcf86cd799439011"}
        studentId: {type: string, example: "608f1f77bcf86cd799439012"}
        status: {type: string, enum: [paid, pending, cancelled], example: "paid"}
        createdAt: {type: string, format: date-time, example: "2023-12-15T09:30:00.000Z"}